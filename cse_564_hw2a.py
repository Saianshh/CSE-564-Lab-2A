# -*- coding: utf-8 -*-
"""cse_564_hw2b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTLLrGXxxMZpCgxAR0z-_nNTV0oVAsnn
"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('processed_final_data.csv')
numerical_cols = df.select_dtypes(include=[np.number]).columns
X = df[numerical_cols]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
pca = PCA()
values = pca.fit_transform(X_scaled)

eigenvalues = pca.explained_variance_
eigenvectors = pca.components_

print(values)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:", eigenvectors)

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import mean_squared_error
from yellowbrick.cluster import KElbowVisualizer
import csv

df = pd.read_csv('processed_final_data.csv')
numeric_data = df.select_dtypes(include=[np.number])
mseValues = []
cluster_ids = pd.DataFrame(index=numeric_data.index)
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(numeric_data)
    clusterOutcomes = kmeans.predict(numeric_data)
    centroids = kmeans.cluster_centers_[kmeans.labels_]
    mse = mean_squared_error(numeric_data, centroids)
    mseValues.append(mse)
    cluster_ids[f'{k}'] = clusterOutcomes

model = KMeans()
visualizer = KElbowVisualizer(model, k=(1,11), metric='distortion')
visualizer.fit(numeric_data)
elbow = visualizer.elbow_value_


print(mseValues)
print(cluster_ids)
print(elbow)

cluster_ids.to_csv("cluster_ids.csv", index=False)

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('processed_final_data.csv')
numerical_cols = df.select_dtypes(include=[np.number]).columns
X = df[numerical_cols]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=2)
pcaValues = pca.fit_transform(X_scaled)
transformedPcaValues = MinMaxScaler((-1,1)).fit_transform(pcaValues)

eigenvalues = pca.explained_variance_
eigenvectors = pca.components_

print(pcaValues)
print()
print(transformedPcaValues)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:", eigenvectors)

pcaDf = pd.DataFrame(transformedPcaValues, columns=['PC1', 'PC2'])
pcaDf.to_csv('pca1and2ScaledData.csv', index=False)